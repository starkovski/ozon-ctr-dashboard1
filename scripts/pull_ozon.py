import os, sys, time, math, json, datetime as dt
import requests
import pandas as pd

BASE = "https://api-seller.ozon.ru"

CLIENT_ID = os.getenv("OZON_CLIENT_ID")
API_KEY   = os.getenv("OZON_API_KEY")

HEADERS = {
    "Client-Id": CLIENT_ID or "",
    "Api-Key": API_KEY or "",
    "Content-Type": "application/json"
}

if not CLIENT_ID or not API_KEY:
    print("‚ùå –ù–µ—Ç OZON_CLIENT_ID / OZON_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Secrets).")
    sys.exit(1)

# ---- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –ø–æ–ª–Ω—ã—Ö –¥–Ω–µ–π ----
today = dt.date.today()
date_to = (today - dt.timedelta(days=1)).strftime("%Y-%m-%d")
date_from = (today - dt.timedelta(days=30)).strftime("%Y-%m-%d")

# ---- –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ------------------------------------------------------------

def post_json(url: str, body: dict) -> dict:
    r = requests.post(url, headers=HEADERS, json=body, timeout=60)
    code = r.status_code
    try:
        txt = r.text
        data = r.json() if "application/json" in r.headers.get("Content-Type", "") else {}
    except Exception:
        data = {}
        txt = r.text
    if code >= 400:
        print(f"üëâ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {code}")
        print(f"üëâ –û—Ç–≤–µ—Ç: {txt}")
        r.raise_for_status()
    return data

def chunked(lst, size):
    for i in range(0, len(lst), size):
        yield lst[i:i+size]

# ---- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ product_id —á–µ—Ä–µ–∑ /v3/product/list ---------------------
# –í–ê–ñ–ù–û: —É –º–µ—Ç–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π filter –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è —á–µ—Ä–µ–∑ last_id (limit <= 1000)
# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è/SDK –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç —Å—Ö–µ–º—É —Å filter/last_id/limit.  [oai_citation:3‚Ä°pkg.go.dev](https://pkg.go.dev/github.com/diphantxm/ozon-api-client/ozon?utm_source=chatgpt.com)
def get_all_product_ids():
    all_items = []
    last_id = ""
    page = 1
    while True:
        body = {
            "filter": {
                "visibility": "ALL"  # –º–æ–∂–Ω–æ —Å—É–∑–∏—Ç—å: VISIBLE/INVISIBLE/EMPTY_STOCK
            },
            "last_id": last_id,
            "limit": 1000  # –º–∞–∫—Å–∏–º—É–º 1000
        }
        print(f"üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})...")
        data = post_json(f"{BASE}/v3/product/list", body)
        # —Ä–∞–∑–Ω—ã–µ –æ–±—ë—Ä—Ç–∫–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è: result.items –∏–ª–∏ items
        result = data.get("result") or data
        items = (result or {}).get("items", [])
        if not items:
            break
        all_items.extend(items)
        last_id = (result or {}).get("last_id", "")
        page += 1
        if not last_id:
            break
        # –Ω–µ–±–æ–ª—å—à–∞—è –≤–µ–∂–ª–∏–≤–∞—è –ø–∞—É–∑–∞
        time.sleep(0.3)
    if not all_items:
        print("‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å –≤–∏–¥–∏–º–æ—Å—Ç—å –∏ –ø—Ä–∞–≤–∞ API-–∫–ª—é—á–∞.")
    return all_items

# ---- –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ /v3/product/info/list -----------------------
# –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ ‚Äî –∏–º–µ–Ω–Ω–æ v3 (v2 –¥–∞—Å—Ç 404).  [oai_citation:4‚Ä°docs.ozon.ru](https://docs.ozon.ru/global/en/api/?utm_source=chatgpt.com)
def enrich_names(product_ids):
    names = {}
    for batch in chunked(product_ids, 100):
        body = { "product_id": batch }
        data = post_json(f"{BASE}/v3/product/info/list", body)
        result = data.get("result") or {}
        items = result.get("items") or result.get("products") or result.get("result") or []
        # —Ñ–æ—Ä–º–∞—Ç –±—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–π; –ª–æ–≤–∏–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–ª—è:
        for it in items:
            pid = it.get("id") or it.get("product_id")
            name = it.get("name") or it.get("title") or ""
            offer = it.get("offer_id") or it.get("sku") or ""
            if pid is not None:
                names[int(pid)] = {"name": name, "offer_id": str(offer)}
        time.sleep(0.2)
    return names

# ---- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: /v1/analytics/data -----------------------------------------
# –£ API –±—ã–≤–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è ‚Äî –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞.
# –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –º–µ—Ç—Ä–∏–∫, –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏–º 2 –∑–Ω–∞—á–µ–Ω–∏—è –≤ "metrics".
# –ò—Å—Ç–æ—Ä–∏—è ¬´–∫–∞–ø—Ä–∏–∑–Ω–æ—Å—Ç–∏¬ª –º–µ—Ç—Ä–∏–∫ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ—Ç–æ–¥–∞ –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞.  [oai_citation:5‚Ä°dev.ozon.ru](https://dev.ozon.ru/community/585-Perestal-rabotat-metod-v1-analytics-data?utm_source=chatgpt.com)
METRIC_PAIRS = [
    ("hits_view", "hits_click"),
    ("hits_view_search", "hits_click_search"),
]

def try_fetch_analytics(product_ids, m_view, m_click):
    rows = []
    for batch in chunked(product_ids, 200):  # —Ä–∞–∑—É–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞
        offset = 0
        while True:
            body = {
                "date_from": date_from,
                "date_to": date_to,
                "metrics": [m_view, m_click],
                "dimension": ["product_id"],
                "limit": 1000,
                "offset": offset,
                "filters": [
                    {"key": "product_id", "operator": "IN", "value": [str(x) for x in batch]}
                ]
            }
            data = post_json(f"{BASE}/v1/analytics/data", body)
            result = data.get("result") or {}
            part = result.get("data", [])
            if not part:
                break
            for row in part:
                dims = row.get("dimensions", [])
                mets = row.get("metrics", [])
                if not dims or len(mets) < 2:
                    # –∫–∞–∫ —Ä–∞–∑ —Ç–æ—Ç —Å–ª—É—á–∞–π ¬´–≤–µ—Ä–Ω—É–ª–∞—Å—å –æ–¥–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞¬ª ‚Äî –ø—É—Å—Ç—å –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—à–∏—Ç
                    rows.append({"_bad_metrics_row": row})
                    continue
                pid = dims[0].get("id")
                try:
                    pid = int(pid)
                except:
                    continue
                views = float(mets[0])
                clicks = float(mets[1])
                rows.append({"product_id": pid, "views": views, "clicks": clicks})
            # –ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ offset
            if len(part) < 1000:
                break
            offset += 1000
            time.sleep(0.2)
        time.sleep(0.2)
    return rows

def get_analytics_all(product_ids):
    for mv, mc in METRIC_PAIRS:
        print(f"üìä –ü—Ä–æ–±—É–µ–º –º–µ—Ç—Ä–∏–∫–∏: {mv} / {mc}")
        rows = try_fetch_analytics(product_ids, mv, mc)
        good = [r for r in rows if "product_id" in r]
        if good:
            return good, (mv, mc)
        # –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É
    return [], None

# ==== MAIN ===================================================================
items = get_all_product_ids()
if not items:
    sys.exit(0)

# –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º product_id, offer_id –µ—Å–ª–∏ –µ—Å—Ç—å
product_ids = []
offer_by_pid = {}
for it in items:
    pid = it.get("product_id") or it.get("id")
    if pid is None:
        continue
    pid = int(pid)
    product_ids.append(pid)
    offer = it.get("offer_id") or ""
    if offer:
        offer_by_pid[pid] = str(offer)

# –ò–º–µ–Ω–∞
print("ü™™ –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è...")
name_map = enrich_names(product_ids)

# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
analytics_rows, used_metrics = get_analytics_all(product_ids)
if not analytics_rows:
    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –ø–æ–∫–∞–∑—ã, –∏ –∫–ª–∏–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä–µ –º–µ—Ç—Ä–∏–∫ API –æ—Ç–¥–∞—ë—Ç —Ç–æ–ª—å–∫–æ 1 –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞/–ø–µ—Ä–∏–æ–¥–∞.")
    print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ METRIC_PAIRS.")
    # –°–æ—Ö—Ä–∞–Ω–∏–º —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ: –ø—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É —Å —à–∞–ø–∫–æ–π, —á—Ç–æ–±—ã —Å–∞–π—Ç –æ—Ç–¥–∞–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    os.makedirs("site", exist_ok=True)
    pd.DataFrame(columns=["product_id","offer_id","name","views","clicks","ctr"]).to_csv("site/data.csv", index=False)
    with open("site/index.html","w",encoding="utf-8") as f:
        f.write("<!doctype html><meta charset='utf-8'><p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥.</p>")
    sys.exit(0)

df = pd.DataFrame(analytics_rows)
# –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –Ω–∞ –≤—Å—è–∫–∏–π (–µ—Å–ª–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ product_id)
df = df.groupby("product_id", as_index=False).sum(numeric_only=True)
df["ctr"] = (df["clicks"] / df["views"]).where(df["views"] > 0, 0) * 100

# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–º –∏–º–µ–Ω–∞ –∏ offer_id
def name_of(pid):
    nm = name_map.get(pid, {})
    n = nm.get("name") or ""
    return n

def offer_of(pid):
    nm = name_map.get(pid, {})
    off = nm.get("offer_id") or offer_by_pid.get(pid, "")
    return str(off)

df["name"] = df["product_id"].apply(name_of)
df["offer_id"] = df["product_id"].apply(offer_of)

# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ CTR —É–±—ã–≤.
df = df[["product_id","offer_id","name","views","clicks","ctr"]].sort_values(["ctr","views"], ascending=[False, False])

# –í—ã–≤–æ–¥
os.makedirs("site", exist_ok=True)
csv_path = "site/data.csv"
df.to_csv(csv_path, index=False)
print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–∏–ª {len(df)} —Å—Ç—Ä–æ–∫ –≤ {csv_path}")
print(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {used_metrics}")

# –ú–∏–Ω–∏-—Å–∞–π—Ç (—Ç–∞–±–ª–∏—Ü–∞)
html = f"""<!doctype html>
<html lang="ru">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>CTR –∑–∞ –º–µ—Å—è—Ü (Ozon)</title>
<style>
body{{font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;margin:24px}}
h1{{margin:0 0 8px}}
small{{color:#555}}
table{{border-collapse:collapse;width:100%;margin-top:16px}}
th,td{{border:1px solid #e5e5e5;padding:8px;text-align:left;vertical-align:top}}
th{{background:#fafafa;cursor:pointer;position:sticky;top:0}}
tr:nth-child(even){{background:#fcfcfc}}
.search{{margin-top:12px}}
input[type=search]{{padding:8px;width:320px;max-width:100%}}
.badge{{display:inline-block;background:#f1f5f9;border:1px solid #e2e8f0;border-radius:6px;padding:2px 6px;margin-left:6px;font-size:12px}}
</style>
<h1>CTR –ø–æ —Ç–æ–≤–∞—Ä–∞–º</h1>
<small>–ü–µ—Ä–∏–æ–¥: {date_from} ‚Üí {date_to}. –ú–µ—Ç—Ä–∏–∫–∏: {used_metrics[0]} / {used_metrics[1]}.</small>
<div class="search">
  <input id="q" type="search" placeholder="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ SKU‚Ä¶">
  <span class="badge">–∫–ª–∏–∫–∏/–ø–æ–∫–∞–∑—ã √ó 100</span>
</div>
<table id="t">
  <thead>
    <tr>
      <th data-k="product_id">Product ID</th>
      <th data-k="offer_id">SKU</th>
      <th data-k="name">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
      <th data-k="views">–ü–æ–∫–∞–∑—ã</th>
      <th data-k="clicks">–ö–ª–∏–∫–∏</th>
      <th data-k="ctr">CTR, %</th>
    </tr>
  </thead>
  <tbody></tbody>
</table>
<script>
async function load() {{
  const resp = await fetch('data.csv');
  const text = await resp.text();
  const rows = text.trim().split(/\\r?\\n/).map(l => l.split(/,(?=(?:[^"]*"[^"]*")*[^"]*$)/));
  const head = rows.shift().map(h=>h.replace(/^"|"$/g,''));
  const data = rows.map(r => Object.fromEntries(r.map((v,i)=>[head[i], v.replace(/^"|"$/g,'') ])));
  data.forEach(d => {{
    d.views = +d.views || 0;
    d.clicks = +d.clicks || 0;
    d.ctr = +d.ctr || 0;
  }});
  window._data = data;
  render();
}}
function render(sortKey='ctr', desc=true) {{
  const q = (document.getElementById('q').value||'').toLowerCase().trim();
  let arr = window._data || [];
  if (q) {{
    arr = arr.filter(x => (x.name||'').toLowerCase().includes(q) || (x.offer_id||'').toLowerCase().includes(q));
  }}
  arr = arr.slice().sort((a,b)=> (desc? (b[sortKey]-a[sortKey]) : (a[sortKey]-b[sortKey])) );
  const tb = document.querySelector('#t tbody');
  tb.innerHTML='';
  for (const x of arr) {{
    const tr = document.createElement('tr');
    tr.innerHTML = `
      <td>${{x.product_id}}</td>
      <td>${{x.offer_id||''}}</td>
      <td>${{x.name||''}}</td>
      <td>${{x.views}}</td>
      <td>${{x.clicks}}</td>
      <td>${{(x.ctr).toFixed(2)}}</td>
    `;
    tb.appendChild(tr);
  }}
}}
document.getElementById('q').addEventListener('input', ()=>render());
document.querySelectorAll('th').forEach(th => {{
  th.addEventListener('click', () => {{
    const k = th.dataset.k;
    const desc = !(th.dataset.desc==='true');
    th.dataset.desc = desc;
    render(k, desc);
  }});
}});
load();
</script>
</html>
"""
with open("site/index.html", "w", encoding="utf-8") as f:
    f.write(html)

print("üåê –°–∞–π—Ç —Å–æ–±—Ä–∞–Ω –≤ –ø–∞–ø–∫–µ site/")
