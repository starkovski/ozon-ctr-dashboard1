import os
import requests
import pandas as pd
from datetime import datetime, timedelta

# üîë API –∫–ª—é—á–∏ –∏–∑ GitHub Secrets
CLIENT_ID = os.getenv("OZON_CLIENT_ID")
API_KEY = os.getenv("OZON_API_KEY")

HEADERS = {
    "Client-Id": CLIENT_ID,
    "Api-Key": API_KEY,
    "Content-Type": "application/json"
}

# === 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ ===
def get_products():
    url = "https://api-seller.ozon.ru/v3/product/list"
    products = []
    page = 1

    while True:
        body = {
            "page_size": 1000,
            "page": page,
            "filter": {}
        }
        print(f"üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})...")
        r = requests.post(url, headers=HEADERS, json=body)
        print("üëâ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞:", r.status_code)
        r.raise_for_status()
        data = r.json()["result"]

        if not data["items"]:
            break

        products.extend(data["items"])

        if len(data["items"]) < 1000:
            break
        page += 1

    return products

# === 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ ===
def get_analytics(product_ids, date_from, date_to):
    url = "https://api-seller.ozon.ru/v1/analytics/data"
    body = {
        "date_from": date_from,
        "date_to": date_to,
        "metrics": ["hits_view", "hits_click"],
        "dimension": ["product_id"],
        "filters": [
            {
                "key": "product_id",
                "value": product_ids,
                "operator": "IN"
            }
        ],
        "limit": 1000,
        "offset": 0
    }

    print(f"üìä –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É c {date_from} –ø–æ {date_to}...")
    r = requests.post(url, headers=HEADERS, json=body)
    print("üëâ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞:", r.status_code)
    print("üëâ –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:", r.text[:300])
    r.raise_for_status()
    return r.json()

# === 3. –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç ===
if __name__ == "__main__":
    # üìÖ –ø–µ—Ä–∏–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
    date_to = datetime.today().strftime("%Y-%m-%d")
    date_from = (datetime.today() - timedelta(days=30)).strftime("%Y-%m-%d")

    # 1. –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    products = get_products()
    product_map = {str(p["product_id"]): p for p in products}

    # 2. –¥–æ—Å—Ç–∞—ë–º product_id
    product_ids = list(product_map.keys())

    # ‚ö°Ô∏è –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ >1000 ‚Äî –¥–µ–ª–∏–º –Ω–∞ —á–∞–Ω–∫–∏
    all_rows = []
    for i in range(0, len(product_ids), 1000):
        chunk = product_ids[i:i+1000]
        analytics = get_analytics(chunk, date_from, date_to)

        for row in analytics.get("result", {}).get("data", []):
            pid = row["dimensions"][0]["id"]
            views = int(row["metrics"][0]) if len(row["metrics"]) > 0 else 0
            clicks = int(row["metrics"][1]) if len(row["metrics"]) > 1 else 0
            ctr = round((clicks / views * 100), 2) if views > 0 else 0

            product = product_map.get(pid, {})
            all_rows.append({
                "product_id": pid,
                "offer_id": product.get("offer_id", ""),
                "name": product.get("name", ""),
                "views": views,
                "clicks": clicks,
                "ctr": ctr
            })

    # 3. —Ç–∞–±–ª–∏—Ü–∞ + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    df = pd.DataFrame(all_rows)
    df = df.sort_values(by="ctr", ascending=False)

    print("\n‚úÖ –ì–æ—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ CTR:")
    print(df.head(20))  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    df.to_csv("ozon_ctr.csv", index=False, encoding="utf-8-sig")
    print("üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ozon_ctr.csv")
