import os
import requests
import pandas as pd
from datetime import datetime, timedelta

# üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
CLIENT_ID = os.getenv("OZON_CLIENT_ID")
API_KEY = os.getenv("OZON_API_KEY")

HEADERS = {
    "Client-Id": CLIENT_ID,
    "Api-Key": API_KEY,
    "Content-Type": "application/json"
}

# ===== –§–£–ù–ö–¶–ò–ò =====

def get_products():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å product_id"""
    url = "https://api-seller.ozon.ru/v3/product/list"
    products = []
    page = 1

    while True:
        body = {
            "page_size": 1000,
            "page": page,
            "filter": {
                "visibility": "ALL"  # ‚úÖ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å
            }
        }
        print(f"üì¶ –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page})...")
        r = requests.post(url, headers=HEADERS, json=body)
        print("üëâ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞:", r.status_code)
        if r.status_code != 200:
            print("üëâ –û—Ç–≤–µ—Ç:", r.text)
        r.raise_for_status()

        data = r.json()["result"]

        if not data["items"]:
            break

        products.extend(data["items"])

        if len(data["items"]) < 1000:
            break
        page += 1

    return products


def get_analytics(product_ids, date_from, date_to):
    """–ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ product_id"""
    url = "https://api-seller.ozon.ru/v1/analytics/data"
    analytics = []

    # Ozon —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 1000 ID –∑–∞ —Ä–∞–∑
    chunk_size = 1000
    for i in range(0, len(product_ids), chunk_size):
        chunk = product_ids[i:i + chunk_size]

        body = {
            "date_from": date_from,
            "date_to": date_to,
            "metrics": ["hits_view", "hits_click", "conv_tocart", "revenue"],
            "dimension": ["sku"],  # –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ SKU
            "filters": [
                {
                    "key": "product_id",
                    "value": list(map(str, chunk))
                }
            ],
            "limit": 1000,
            "offset": 0
        }

        print(f"üìä –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è {len(chunk)} —Ç–æ–≤–∞—Ä–æ–≤...")
        r = requests.post(url, headers=HEADERS, json=body)
        print("üëâ –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞:", r.status_code)
        if r.status_code != 200:
            print("üëâ –û—Ç–≤–µ—Ç:", r.text)
        r.raise_for_status()

        data = r.json()["result"]["data"]
        analytics.extend(data)

    return analytics


# ===== –û–°–ù–û–í–ù–û–ô –°–ö–†–ò–ü–¢ =====

if __name__ == "__main__":
    print("üì¶ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤...")
    products = get_products()
    product_map = {str(p["product_id"]): p["name"] for p in products}
    product_ids = list(product_map.keys())

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(product_ids)}")

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    date_to = datetime.now().strftime("%Y-%m-%d")
    date_from = (datetime.now() - timedelta(days=30)).strftime("%Y-%m-%d")

    print(f"üìä –ü–µ—Ä–∏–æ–¥: {date_from} ‚Üí {date_to}")
    analytics = get_analytics(product_ids, date_from, date_to)

    rows = []
    for row in analytics:
        sku = row["dimensions"][0]["id"]
        name = product_map.get(sku, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        metrics = row["metrics"]

        views = float(metrics[0]) if len(metrics) > 0 else 0
        clicks = float(metrics[1]) if len(metrics) > 1 else 0
        cart = float(metrics[2]) if len(metrics) > 2 else 0
        revenue = float(metrics[3]) if len(metrics) > 3 else 0

        ctr = (clicks / views * 100) if views > 0 else 0

        rows.append({
            "SKU": sku,
            "–ù–∞–∑–≤–∞–Ω–∏–µ": name,
            "–ü–æ–∫–∞–∑—ã": views,
            "–ö–ª–∏–∫–∏": clicks,
            "CTR %": round(ctr, 2),
            "–í –∫–æ—Ä–∑–∏–Ω—É": cart,
            "–í—ã—Ä—É—á–∫–∞": revenue
        })

    df = pd.DataFrame(rows)
    df = df.sort_values(by="CTR %", ascending=False)

    print("üìä –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞:")
    print(df.head(20))

    df.to_csv("ozon_report.csv", index=False)
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ozon_report.csv")
